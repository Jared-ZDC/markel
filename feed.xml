<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/Jared-ZDC/markel</id><title>RSS feed of Jared-ZDC's markel</title><updated>2024-08-03T08:25:54.282229+00:00</updated><link href="https://github.com/Jared-ZDC/markel"/><link href="https://raw.githubusercontent.com/Jared-ZDC/markel/master/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><entry><id>https://github.com/Jared-ZDC/markel/issues/24</id><title>python In 机器学习(一)</title><updated>2024-08-03T08:25:54.494508+00:00</updated><content type="html"><![CDATA[<h1>LinearRegression</h1>
<p>这里简单记录一下最近学习的算法代码</p>
<h2>多元线性回归算法</h2>
<p>这里主要通过sklearn获取数据进行实验</p>
<pre><code class="language-python">from sklearn import *
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import torch

if __name__ == &#x27;__main__&#x27;:
    # 加载糖尿病数据集
    data = datasets.load_diabetes()
    data_X = data.data
    data_Y = data.target
    # 拆分训练集以及预测数据
    X_train, X_test, Y_train, Y_test = train_test_split(data_X, data_Y, test_size=0.2)

    # 创建一个多元线性回归算法对象
    lr = LinearRegression()

    # 使用训练集训练模型
    lr.fit(X_train, Y_train)

    # 使用测试集进行预测
    Y_pred = lr.predict(X_test)
    Y_pred_train = lr.predict(X_train)
    # 打印模型的均方差
    print(f&quot;pred loss : {mean_squared_error(Y_test, Y_pred)}&quot;)

    print(f&quot;Y_pred_train loss : {mean_squared_error(Y_train, Y_pred_train)}&quot;)
    pass

</code></pre>
<h2>分类</h2>
<p>这里是分类的应用：</p>
<ul>
<li>logistics回归 ： OVR，one vs other，将多分类当成多个二分类</li>
<li>softmax：一次得到多个分类的概率</li>
</ul>
<pre><code class="language-python">from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

if __name__ == &#x27;__main__&#x27;:
    # 加载数据
    iris = datasets.load_iris()

    X = iris.data
    Y = iris.target

    print(f&quot;Y = {Y}&quot;)

    # 切分数据
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2)

    # 创建模型, 根据数据决定是用二分类还是多分类
    # 使用logistics回归还是softmax回归 ，取决于multiclass参数
    # ovr ： 1对其它
    # multinomial ： softmax
    #  &quot;multi_class&quot;: [
    #             StrOptions({&quot;auto&quot;, &quot;ovr&quot;, &quot;multinomial&quot;}),
    #             Hidden(StrOptions({&quot;deprecated&quot;})),
    #         ],
    lr = LogisticRegression(max_iter=1000000)

    # 使用训练集训练模型
    lr.fit(X_train, y_train)

    # 对测试集进行预测
    y_pred = lr.predict(X_test)

    # 打印模型的准确率
    print(f&quot;accuracy = {accuracy_score(y_test, y_pred)}&quot;)

</code></pre>
]]></content><link href="https://github.com/Jared-ZDC/markel/issues/24"/><category term="python 机器学习"/><published>2024-08-03T08:25:19+00:00</published></entry><entry><id>https://github.com/Jared-ZDC/markel/issues/16</id><title>聊一聊职业机会</title><updated>2024-08-03T08:25:54.588295+00:00</updated><content type="html"><![CDATA[<p>挺有意思的一件事，最近公司在做组织结构调整，有基层领导岗位的竞聘机会，于是给到自己团队内的核心骨干提示，希望相关骨干能够有勇气，有能力去竞聘一下，本以为会有比较多的同学尝试一下，但是实际的结果却出乎我的意料，最终竞聘的时候，没有一个同学敢于尝试；这里就引申了一个话题，作为研发人员，在职场的机会是什么？</p>
<!-- more -->
<h1>回顾</h1>
<p>我在研发行业也算从业了10多年了，从一个基层研发到10来人的小团队leader到现在leader了几十上百人，其实看到过很多人包括自己在工作中经常会有的思考：</p>
<ul>
<li>我现在做的这个事情的意义是什么</li>
<li>我在这里做几年后，我未来应该要怎么走</li>
<li>是不是要换个方向</li>
<li>要不要跳槽，换个公司</li>
</ul>
<p>这里我们先把这些问题放置一边，简单回顾一下自己这些年职场发展过程；</p>
<hr />
<p>在自己的职业发展过程中，一方面确实吃到了时代的红利，给了自己在工作、待遇上非常大的帮助；另外一方面，个人在其中也是花了很大的精力；
总结这十多年的过程来看，我认为主要有几个点起到了关键性的作用：</p>
<ul>
<li>韧性</li>
<li>学习能力</li>
<li>做事的方式方法</li>
</ul>
<h2>韧性</h2>
<p>为什么把<strong>韧性</strong>排在了第一位？
这不得不回想起整个职业生涯里面的几个关键节点：
<strong>第一个节点</strong>是初入职场时候身份的转变，我们从象牙塔里面出来，之前最大的压力，无非是作业、考试，影响的仅仅是自己一个人，但是项目职场中，个人的事务往往牵扯上下游相关的同事，一个人进度的影响可能导致的是整个周边的delay，这里带来的情绪上，压力上的强度是相比之前不可同日而语的；</p>
<p>回想同一批进入华为的同学，大概一个大班级有150人左右，一年后，剩余的不过80人，基本已经淘汰一半 ，而这一半很多同学是无法适应在激烈对抗的公司里面的压力而离开的；</p>
<p><strong>第二个节点</strong>，是工作三年后，这个时候，容易产生职场的疲惫，特别是在华为这样的公司里面，竞争激烈，工作强度大，很容易造成放弃；</p>
<p>还记得15年的时候，当时在实验室里面连续工作了3~4个月，巨大的工作强度以及工作压力，差一点就提了离职，5.1号劳动节当天回了老家买房，本来打算回来就提离职的，不过因为最后想着再咬咬牙坚持一下，最终还是扛过了这段黑暗的时光，也熬出了一个很好的上升机会；</p>
<p><strong>第三个节点</strong>，是自己升任团队基层管理者的时候，带了10个人负责一个方向的事务，工作开始变得杂乱，不像以前那么单纯，这个时候，由于有了一定的能力，周边的干扰开始多了起来，各种相关的职场机会也找来了，但是是不是找来的一定是个好机会，不一定见得，但是知道得是，那个阶段走出去得同学，目前看，还没有在职场混的更好得同学；</p>
<p>以上想说明得是什么？很多时候，我们认为一些事情很难扛过去，但是咬咬牙，等这件事情真的过去了之后，再看看，其实好像也没有什么，反而在这个过程中，我们得能力、影响力都得到了提升；</p>
<p>所以，人一定要有<strong>韧性，耐操，不玻璃心</strong>，这个是我认为在职场中，最为核心的内在能力之一</p>
<h2>学习能力</h2>
<p>个人认为第二重要的就是学习能力！</p>
<p>在笔者经历的这些大厂的工作生涯里面，对于一个新的领域，是否能够很快的上手，很快的掌握核心能力，是决定一个人能否拿出结果的重要能力；</p>
<p>在学校阶段，笔者是学习J2EE的，即java/struct/hibernate/spring这一套，但是入职后，就被分配到了芯片行业，当时我连arm芯片是什么都不知道，刚入职领导让用C写一个简单的memory copy也整不明白，更不用说，对于底层软件的执行逻辑、操作系统的理解了，毕竟大学都是60分万岁通过的；</p>
<p>但是入职半年左右，通过没日没夜的学习，笔者很快在同年入职的新员工里面脱颖而出，特别的是大部分还是研究生，拿到了当年的最佳新员工；</p>
<p>这里面，当然也有一些技巧，简单来说，笔者学习总是伴随着问题学习，以解决问题为目的的学习，同时伴随着模仿以及厚脸皮的请教，能够很快的上手项目工作并且顺利的交付；</p>
<p>当然，这样的学习方式也是有一定的代价，掌握的深度有点不够的，但是能够快速的掌握大量的知识，在广度上，帮助非常大；至于深度，则需要跟随自己手上的工作花更多的精力去掌握~</p>
<h2>做事的方式方法</h2>
<p><strong>酒香还怕巷子深</strong></p>
<p><strong>低调做人，高调做事！</strong></p>
<p>笔者做事的方式一向比较高调，不管是及时的跟自己的领导同步进展，还是积极主动的去寻求问题的解决办法，总之，一切以把事情完成为目的的去做事，这个过程可能很多人会觉得很高调，类似于献殷勤！</p>
<p>但是需要明白的是，这个跟献殷勤是有很大的区别的，这里的区别在于献殷勤更多的是打感情牌，而主动的沟通交流，主动的汇报进展，更多的是像领导展现自己的能力，中国人向来含蓄，但是笔者认为在职场中，能多外向就多外向，外向型性格，在职场中，总是会吃得香~</p>
<hr />
<p>说了这么多，其实笔者最后想总结的一点是：</p>
<p>机会，是留给有准备的人，是留给主动争取的人，是留给有韧性、学习能力、懂做事方法的人，当机会出现的时候，就要积极的去尝试，争取，哪怕是去露个脸，也总比白白放过要强~</p>
<p>这里也是提醒自己，<strong>生活中，有些机会稍纵即逝，把握与放弃，就在一念之间！</strong></p>
]]></content><link href="https://github.com/Jared-ZDC/markel/issues/16"/><category term="生活感悟"/><published>2024-06-04T05:54:14+00:00</published></entry><entry><id>https://github.com/Jared-ZDC/markel/issues/15</id><title>Qemu Virt平台集成ARM PL080 DMA</title><updated>2024-08-03T08:25:54.699244+00:00</updated><content type="html"><![CDATA[<h1>背景</h1>
<p>最近有比较多的新员工入职，新员工入职如何更快的适应工作，需要通过一些虚拟项目进行工作培训；但是如果利用现有的芯片平台进行验证，有几个缺陷：</p>
<ul>
<li>当前芯片略显复杂，新员工接手理解难度较高</li>
<li>平台已经solid，并且有参考的代码以及测试用例，对于新员工而言，没有起到端到端cover一个模块的作用</li>
<li>难以预埋bug，无法通过挖掘设计bug，衡量验证效果</li>
</ul>
<p>因此根据实际工作需求，设计了一个可以给到新员工练兵的验证项目，利用qemu平台，集成一个简单的DMA模块，并且在模块中预埋一些bug，让新员工提前感知在后续验证过程中，应该要重点关注的一些验证重点，验证难点，同时也可以观察在整个新员工项目过程中，新员工的表现，识别高潜人才；</p>
<!-- more -->
<h1>验证平台开发</h1>
<h2>集成开发环境</h2>
<p>Qemu针对arm类的处理器，提供了一个单纯的开发环境，Virt平台，如下是virt平台的一些简述：</p>
<blockquote>
<p><a href="https://www.qemu.org/docs/master/system/riscv/virt.html#virt-generic-virtual-platform-virt">‘virt’ Generic Virtual Platform</a>
The virt board is a platform which does not correspond to any real hardware; it is designed for use in virtual machines. It is the recommended board type if you simply want to run a guest such as Linux and do not care about reproducing the idiosyncrasies and limitations of a particular bit of real-world hardware.
<a href="https://www.qemu.org/docs/master/system/riscv/virt.html#supported-devices">Supported devices</a>
The virt machine supports the following devices:</p>
<ul>
<li>Up to 512 generic RV32GC/RV64GC cores, with optional extensions</li>
<li>Core Local Interruptor (CLINT)</li>
<li>Platform-Level Interrupt Controller (PLIC)
*CFI parallel NOR flash memory</li>
<li>1 NS16550 compatible UART</li>
<li>1 Google Goldfish RTC</li>
<li>1 SiFive Test device</li>
<li>8 virtio-mmio transport devices</li>
<li>1 generic PCIe host bridge</li>
<li>The fw_cfg device that allows a guest to obtain data from QEMU
The hypervisor extension has been enabled for the default CPU, so virtual machines with hypervisor extension can simply be used without explicitly declaring.</li>
</ul>
</blockquote>
<p>所以在Virt平台中，简单集成一下virtio-mmio设备即可；</p>
<p>于此同时，对于验证新手项目而言，DMA设备是一个能够比较小巧又比较全面的设备，因此可以选择一个相对简单的DMA集成到环境中即可；</p>
<h2>DMA选型</h2>
<p>在原生qemu 代码中，提供了如下几款DMA设备：</p>
<ul>
<li>bcm2835_dma</li>
<li>omap_dma</li>
<li>arm pl080 dma</li>
<li>arm pl330 dma</li>
<li>xlnx的3款dma</li>
<li>...
<img src="https://github.com/Jared-ZDC/markel/assets/17999499/8631ad56-50c5-4a4d-b657-699aaee31024" alt="qemu dma" /></li>
</ul>
<p>从选择的几个dma spec内容看起来，arm的pl080 dma相对简单，并且有完善的spec资料以及开源支持的驱动代码，因此在选型上个人更偏向arm PL080 DMA设备；</p>
<h2>集成DMA</h2>
<p>qemu virt集成的方式比较简单，首先看一下pl080的设备描述：</p>
<pre><code class="language-c">static Property pl080_properties[] = {
    DEFINE_PROP_LINK(&quot;downstream&quot;, PL080State, downstream,
                     TYPE_MEMORY_REGION, MemoryRegion *),
    DEFINE_PROP_END_OF_LIST(),
};
</code></pre>
<p>PL080的属性只有一个downstream， 类型是memory region类型，表示dma 链接系统memory的区域， 因此在qemu virt平台中集成只要对downstream进行处理即可：</p>
<pre><code class="language-c">//virt.c
static const MemMapEntry base_memmap[] = {
    /* Space up to 0x8000000 is reserved for a boot ROM */
    [VIRT_FLASH] =              {          0, 0x08000000 },
...
    [VIRT_DMA] =                { 0x09011000, 0x00001000 },
...
    [VIRT_MEM] =                { GiB, LEGACY_RAMLIMIT_BYTES },
};

static const int a15irqmap[] = {
    [VIRT_UART] = 1,
    [VIRT_RTC] = 2,
...
    [VIRT_PLATFORM_BUS] = 112, /* ...to 112 + PLATFORM_BUS_NUM_IRQS -1 */
    [VIRT_DMA] = 212,
};
static void create_dma(const VirtMachineState *vms)
{
    int i;
    char *nodename;
    hwaddr base = vms-&gt;memmap[VIRT_PDMA].base;
    hwaddr size = vms-&gt;memmap[VIRT_PDMA].size;
    int irq = vms-&gt;irqmap[VIRT_PDMA];
    const char compat[] = &quot;arm,pl080\0arm,primecell&quot;;
    const char irq_names[] = &quot;intr\0interr\0inttc&quot;;
    DeviceState *dev;
    MachineState *ms = MACHINE(vms);
    SysBusDevice *busdev;

    dev = qdev_new(&quot;pl080&quot;);

    object_property_set_link(OBJECT(dev), &quot;downstream&quot;, OBJECT(get_system_memory()), &amp;error_fatal);

    busdev = SYS_BUS_DEVICE(dev);
    sysbus_realize_and_unref(busdev, &amp;error_fatal);
    sysbus_mmio_map(busdev, 0, base);

    for (i = 0; i &lt; 3; ++i) {
        sysbus_connect_irq(busdev, i, qdev_get_gpio_in(vms-&gt;gic, irq + i));
    }

    nodename = g_strdup_printf(&quot;/pl080@%&quot; PRIx64, base);
    qemu_fdt_add_subnode(ms-&gt;fdt, nodename);
    qemu_fdt_setprop(ms-&gt;fdt, nodename, &quot;compatible&quot;, compat, sizeof(compat));
    qemu_fdt_setprop_sized_cells(ms-&gt;fdt, nodename, &quot;reg&quot;,
                                 2, base, 2, size);
    qemu_fdt_setprop_cells(ms-&gt;fdt, nodename, &quot;interrupts&quot;,
                    GIC_FDT_IRQ_TYPE_SPI, irq, GIC_FDT_IRQ_FLAGS_LEVEL_HI,
                    GIC_FDT_IRQ_TYPE_SPI, irq + 1, GIC_FDT_IRQ_FLAGS_LEVEL_HI,
                    GIC_FDT_IRQ_TYPE_SPI, irq + 2, GIC_FDT_IRQ_FLAGS_LEVEL_HI);

    qemu_fdt_setprop(ms-&gt;fdt, nodename, &quot;interrupt-names&quot;, irq_names,
                     sizeof(irq_names));

    qemu_fdt_setprop_cell(ms-&gt;fdt, nodename, &quot;clocks&quot;, vms-&gt;clock_phandle);
    qemu_fdt_setprop_string(ms-&gt;fdt, nodename, &quot;clock-names&quot;, &quot;apb_pclk&quot;);

    g_free(nodename);
}

</code></pre>
<p>为了验证集成dma的寄存器访问正确性， 单独将0x64寄存器设置为魔术字寄存器，可读，可写</p>
<pre><code class="language-patch">//dma集成读写测试用
diff --git a/qemu/qemu-8.1.4/hw/dma/pl080.c b/qemu/qemu-8.1.4/hw/dma/pl080.c
index a03dcf428..9ff191a02 100644
--- a/qemu/qemu-8.1.4/hw/dma/pl080.c
+++ b/qemu/qemu-8.1.4/hw/dma/pl080.c
@@ -221,6 +221,8 @@ static uint64_t pl080_read(void *opaque, hwaddr offset,
     uint32_t i;
     uint32_t mask;

+    qemu_log_mask(LOG_GUEST_ERROR,&quot;pl080_read %x, %d,  size %x\n&quot;, offset, offset &gt;&gt; 2, size);
+
     if (offset &gt;= 0xfe0 &amp;&amp; offset &lt; 0x1000) {
         if (s-&gt;nchannels == 8) {
             return pl080_id[(offset - 0xfe0) &gt;&gt; 2];
@@ -275,6 +277,8 @@ static uint64_t pl080_read(void *opaque, hwaddr offset,
         return s-&gt;conf;
     case 13: /* Sync */
         return s-&gt;sync;
+    case 16: /*magic word*/
+       return s-&gt;magic_words;
     default:
     bad_offset:
         qemu_log_mask(LOG_GUEST_ERROR,
@@ -289,6 +293,7 @@ static void pl080_write(void *opaque, hwaddr offset,
     PL080State *s = (PL080State *)opaque;
     int i;

+    qemu_log_mask(LOG_GUEST_ERROR,&quot;pl080_write %x, size %x, value %x\n&quot;, offset, size, value);
     if (offset &gt;= 0x100 &amp;&amp; offset &lt; 0x200) {
         i = (offset &amp; 0xe0) &gt;&gt; 5;
         if (i &gt;= s-&gt;nchannels)
@@ -338,6 +343,8 @@ static void pl080_write(void *opaque, hwaddr offset,
     case 13: /* Sync */
         s-&gt;sync = value;
         break;
+    case 16: /*magic word*/
+       s-&gt;magic_words = value;
     default:
     bad_offset:
         qemu_log_mask(LOG_GUEST_ERROR,
@@ -366,7 +373,7 @@ static void pl080_reset(DeviceState *dev)
     s-&gt;req_single = 0;
     s-&gt;req_burst = 0;
     s-&gt;running = 0;
-
+    s-&gt;magic_words = 0x55aa55aa;
     for (i = 0; i &lt; s-&gt;nchannels; i++) {
         s-&gt;chan[i].src = 0;
         s-&gt;chan[i].dest = 0;
</code></pre>
<h2>编译</h2>
<p>将qemu编译完成后，使用如下命令启动系统：</p>
<pre><code class="language-bash">build/qemu-system-aarch64 \
    -nographic \
    -M virt,virtualization=true,gic-version=3 \
    -cpu cortex-a76 \
    -smp 4 \
    -m 8G \
    -kernel ../../linux/linux-6.6/arch/arm64/boot/Image \
    -append &quot;rootfstype=ramfs rdinit=/linuxrc console=ttyAMA0&quot; \
    -initrd ../../busybox/busybox-1.36.1/initrd.cpio.gz
</code></pre>
<h2>测试</h2>
<h3>dump dma寄存器</h3>
<p>通过dump dma的寄存器，简单看一下dma寄存器是否按照预期集成完成</p>
<pre><code class="language-bash">[root:DMA: ~]# devmem 0x9012040
0x55AA55AA
[root:DMA: ~]# devmem 0x9012040 32 0xaa55aa55
[root:DMA: ~]# devmem 0x9012040
0xAA55AA55
</code></pre>
<p>寄存器读写功能正常</p>
<h3>dma搬运测试</h3>
<h4>dma测试驱动</h4>
<p>简单写一个dma测试代码，搬运两个地址的数据，并进行搬运后数据检查，看看中断是否正常上报</p>
<pre><code class="language-c">static ssize_t memcpy_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos) {
    // 实现 memcpy 文件的写操作
    // 检查输入参数
    if (count &gt; BUFFER_SIZE) {
        return -EINVAL;
    }

    // 从用户空间拷贝数据到 buffer_in
    if (copy_from_user(buffer_in, buf, count)) {
        return -EFAULT;
    }

    // 设置 DMA 传输参数
    struct dma_async_tx_descriptor *desc;
    dma_addr_t src_addr = virt_to_phys(buffer_in);
    dma_addr_t dst_addr = virt_to_phys(buffer_out);

    memset(buffer_in,0x5a,0x40);
    memset(buffer_out,0x0,0x40);
    pr_info(&quot;dump buffer_in\n&quot;);
    dump(buffer_in, 0x40);


    desc = dmaengine_prep_dma_memcpy(dma_chan, dst_addr, src_addr, 0x40, DMA_MEM_TO_MEM);
    if (!desc) {
        pr_err(&quot;Failed to prepare DMA transfer\n&quot;);
        return -EBUSY;
    }

    desc-&gt;flags = DMA_CTRL_ACK | DMA_PREP_INTERRUPT;
    // 设置 DMA 完成中断处理函数
    desc-&gt;callback = dma_complete_callback;
    desc-&gt;callback_param = NULL;

    pr_err(&quot;prepare to sumbit\n&quot;);

    // 启动 DMA 传输
    dmaengine_submit(desc);
    pr_err(&quot;prepare to async\n&quot;);
    dma_async_issue_pending(dma_chan);

    msleep(2000);

    pr_info(&quot;dump buffer_out\n&quot;);
    dump(buffer_out, 0x40);

    // 等待 DMA 传输完成
    /*
    while (!dma_complete) {
        cpu_relax();
    }
*/
 //   dma_complete = false;
    return count;
}

static int dmatest_device_init(void)
{
    // 1. 创建设备类
    dmatest_device_class = class_create(&quot;dmatest_device_class&quot;);
    if (IS_ERR(dmatest_device_class)) {
        printk(KERN_ERR &quot;Failed to create device class\n&quot;);
        return PTR_ERR(dmatest_device_class);
    }

    // 2. 创建设备
    dmatest_device = device_create(dmatest_device_class, NULL, MKDEV(230, 0), NULL, &quot;dmatest&quot;);
    if (IS_ERR(dmatest_device)) {
        printk(KERN_ERR &quot;Failed to create device\n&quot;);
        class_destroy(dmatest_device_class);
        return PTR_ERR(dmatest_device);
    }

    printk(KERN_INFO &quot;dmatest_device created successfully\n&quot;);
    return 0;
}


static int dmatest_init(void) {



    if(dmatest_device_init())
        return -1;

    dmatest_dir = proc_mkdir(&quot;dmatest&quot;, NULL);
    if (!dmatest_dir) {
        pr_err(&quot;Failed to create dmatest directory in procfs\n&quot;);
        return -ENOMEM;
    }

    memcpy_file = proc_create(&quot;memcpy&quot;, 0644, dmatest_dir, &amp;memcpy_fops);
    if (!memcpy_file) {
        pr_err(&quot;Failed to create memcpy file in procfs\n&quot;);
        remove_proc_entry(&quot;dmatest&quot;, NULL);
        return -ENOMEM;
    }

    status_file = proc_create(&quot;status&quot;, 0444, dmatest_dir, &amp;status_fops);
    if (!status_file) {
        pr_err(&quot;Failed to create status file in procfs\n&quot;);
        remove_proc_entry(&quot;memcpy&quot;, dmatest_dir);
        remove_proc_entry(&quot;dmatest&quot;, NULL);
        return -ENOMEM;
    }

    pr_info(&quot;dmatest directory and files created in procfs\n&quot;);
    return 0;
}

</code></pre>
]]></content><link href="https://github.com/Jared-ZDC/markel/issues/15"/><category term="程序人生"/><published>2024-06-04T05:34:28+00:00</published></entry><entry><id>https://github.com/Jared-ZDC/markel/issues/14</id><title>交叉编译Openblas库</title><updated>2024-08-03T08:25:54.821438+00:00</updated><content type="html"><![CDATA[<h1>下载源码</h1>
<pre><code class="language-bash">git clone https://github.com/OpenMathLib/OpenBLAS.git
</code></pre>
<h1>编译</h1>
<pre><code class="language-bash">gmake TARGET=ARMV8 BINARY=64 HOSTCC=gcc CC=aarch64-linux-gnu-gcc FC=aarch64-linux-gnu-gfortran

#可以查看Targetlist.txt看支持哪些目标平台
</code></pre>
<!-- more -->
<h2>注意</h2>
<p><img src="https://github.com/Jared-ZDC/markel/assets/17999499/bca51fc3-2640-463d-8cf8-2d5387540244" alt="image" />
出现这种错误，是因为可能存在windows跟unix的脚本转换错误，这里使用dos2unix将系统目录整体处理一边</p>
<pre><code class="language-bash">dos2unix ./*
dos2unix exports/gensymbol
</code></pre>
<h1>编译完成</h1>
<pre><code class="language-bash"> OpenBLAS build complete. (BLAS CBLAS LAPACK LAPACKE)

  OS               ... Linux
  Architecture     ... arm64
  BINARY           ... 64bit
  C compiler       ... GCC  (cmd &amp; version : aarch64-linux-gnu-gcc (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0)
  Fortran compiler ... GFORTRAN  (cmd &amp; version : GNU Fortran (Ubuntu 10.5.0-1ubuntu1~22.04) 10.5.0)
  Library Name     ... libopenblas_armv8p-r0.3.27.dev.a (Multi-threading; Max num-threads is 20)

To install the library, you can run &quot;make PREFIX=/path/to/your/installation install&quot;.
</code></pre>
<h1>编译benchmark</h1>
<pre><code class="language-bash">cd benchmark
gmake TARGET=ARMV8 BINARY=64 HOSTCC=gcc CC=aarch64-linux-gnu-gcc FC=aarch64-linux-gnu-gfortran
</code></pre>
<h1>测试</h1>
<pre><code class="language-bash">
#设置循环次数
export OPENBLAS_LOOPS=10000000
export OPENBLAS_PARAM_M=200
export OPENBLAS_PARAM_N=200
export OPENBLAS_PARAM_K=200

#设置线程数量，对于某些测试，不一定生效
export OPENBLAS_NUM_THREADS=4

#测试
./sgemm.goto 

</code></pre>
]]></content><link href="https://github.com/Jared-ZDC/markel/issues/14"/><category term="程序人生"/><published>2024-06-03T08:06:28+00:00</published></entry></feed>